{\rtf1\ansi\ansicpg1252\cocoartf1561
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red92\green38\blue153;\red0\green0\blue0;\red63\green110\blue116;
\red28\green0\blue207;\red0\green116\blue0;\red170\green13\blue145;\red46\green13\blue110;\red196\green26\blue22;
}
{\*\expandedcolortbl;;\csgenericrgb\c35900\c14900\c60100;\csgenericrgb\c0\c0\c0;\csgenericrgb\c24700\c43100\c45600;
\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c0\c45600\c0;\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c18100\c5200\c43100;\csgenericrgb\c77000\c10200\c8600;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab543
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 layer\cf3 .\cf2 anchorPoint\cf3  = \cf2 CGPoint\cf3 (x: (\cf4 basepic\cf3 .\cf2 frame\cf3 .\cf2 origin\cf3 .\cf2 x\cf3  + \cf5 0.4\cf3 *\cf4 basepic\cf3 .\cf2 frame\cf3 .\cf2 width\cf3 )/\cf2 CGFloat\cf3 (\cf4 mywidth\cf3 ), y: (\cf4 basepic\cf3 .\cf2 frame\cf3 .\cf2 origin\cf3 .\cf2 y\cf3 +\cf5 5\cf3 )/\cf2 CGFloat\cf3 (\cf4 myheight\cf3 ))\
        \
        \cf4 barrelman\cf3 .\cf2 transform\cf3  = \cf2 CGAffineTransform\cf3 (rotationAngle: \cf2 CGFloat\cf3 .\cf2 pi\cf3 )\
        \
        \
        \cf6 //barrelman.center = CGPoint(x: (basepic.frame.origin.x + 0.4*basepic.frame.width), y: (basepic.frame.origin.y+10))\
\cf3         \cf6 //self.setAnchorPoint(CGPoint(x: (basepic.frame.origin.x + 0.4*basepic.frame.width), y: (basepic.frame.origin.y+10)))\
\cf3         \cf6 //barrelman.transform = barrelman.transform.rotated(by: CGFloat(angleval))\
\cf3        \cf6 //barrelman.transform = CGAffineTransform.init(rotationAngle: CGFloat(angleval))\
\cf3         \cf6 /*\
         \
         barrelman.frame.applying(__CGAffineTransformMake(<#T##a: CGFloat##CGFloat#>, <#T##b: CGFloat##CGFloat#>, <#T##c: CGFloat##CGFloat#>, <#T##d: CGFloat##CGFloat#>, <#T##tx: CGFloat##CGFloat#>, <#T##ty: CGFloat##CGFloat#>))\
         \
        UIView.animate(withDuration: 1) \{\
            self.barrelman.transform = CGAffineTransform(rotationAngle: CGFloat(self.angleval))\}*/\cf3 \
        \cf6 //barrelman.frame.applying(CGAffineTransform.rotated(CGAffineTransform.init(rotationAngle: angleval)))\
\cf3         \cf6 //barrelman.center = CGPoint(x: (basepic.frame.origin.x + 0.4*basepic.frame.width), y: (basepic.frame.origin.y+10))\
\cf3         \cf6 //barrelman.transform = CGAffineTransform.identity.rotated(by: CGFloat(angleval))\
\cf3         \cf6 /*\
        ctx?.setFillColor(red: 0.0, green: 0.0, blue: 0.0, alpha: 1)\
        //ctx?.fill(CGRect(x: (Double(basepic.frame.origin.x + 0.4*basepic.frame.width)), y: (Double(basepic.frame.origin.y+(0.5*basepic.frame.height))), width: 10, height: (-70)))\
        //Rotating the barrel according to the angle\
        \
        //Starting line\
        /*\
        ctx?.beginPath ();\
        ctx?.setLineWidth(10.0)\
        ctx?.move(to: CGPoint(x: (basepic.frame.origin.x + 0.4*basepic.frame.width), y: (basepic.frame.origin.y+(0.5*basepic.frame.height))))\
        barrelmouthx = Double(basepic.frame.origin.x + 0.4*basepic.frame.width)+(Double(70)/sin(angleval))\
        barrelmouthy = Double(basepic.frame.origin.y+(0.5*basepic.frame.height))-70\
        ctx?.addLine(to: CGPoint(x: barrelmouthx, y: barrelmouthy))\
        UIColor(red: 0.0, green: 0.0, blue: 0.0, alpha: 1.0).setFill()\
        UIColor.black.setStroke()\
        ctx?.drawPath(using: CGPathDrawingMode.fillStroke)\
        */\
        ctx?.translateBy(x: (basepic.frame.origin.x + 0.4*basepic.frame.width), y:(basepic.frame.origin.y+(0.5*basepic.frame.height)) )\
        ctx?.rotate(by: CGFloat(angleval))\
        ctx?.fill(CGRect(x: (Double(basepic.frame.origin.x + 0.4*basepic.frame.width)), y: (Double(basepic.frame.origin.y-70)), width: 10, height: (80)))\
        */\cf3 \
        \
\
\
\
\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0
\cf7 extension\cf3  \cf2 UIView\cf3  \{\
    \cf7 func\cf3  setAnchorPoint(\cf7 _\cf3  point: \cf2 CGPoint\cf3 ) \{\
        \cf7 var\cf3  newPoint = \cf2 CGPoint\cf3 (x: \cf2 bounds\cf3 .\cf2 size\cf3 .\cf2 width\cf3  * point.\cf2 x\cf3 , y: \cf2 bounds\cf3 .\cf2 size\cf3 .\cf2 height\cf3  * point.\cf2 y\cf3 )\
        \cf7 var\cf3  oldPoint = \cf2 CGPoint\cf3 (x: \cf2 bounds\cf3 .\cf2 size\cf3 .\cf2 width\cf3  * \cf2 layer\cf3 .\cf2 anchorPoint\cf3 .\cf2 x\cf3 , y: \cf2 bounds\cf3 .\cf2 size\cf3 .\cf2 height\cf3  * \cf2 layer\cf3 .\cf2 anchorPoint\cf3 .\cf2 y\cf3 );\
        \
        newPoint = newPoint.\cf8 applying\cf3 (\cf2 transform\cf3 )\
        oldPoint = oldPoint.\cf8 applying\cf3 (\cf2 transform\cf3 )\
        \
        \cf7 var\cf3  position = \cf2 layer\cf3 .\cf2 position\cf3 \
        \
        position.\cf2 x\cf3  -= oldPoint.\cf2 x\cf3 \
        position.\cf2 x\cf3  += newPoint.\cf2 x\cf3 \
        \
        position.\cf2 y\cf3  -= oldPoint.\cf2 y\cf3 \
        position.\cf2 y\cf3  += newPoint.\cf2 y\cf3 \
        \
        \cf2 layer\cf3 .\cf2 position\cf3  = position\
        \cf2 layer\cf3 .\cf2 anchorPoint\cf3  = point\
    \}\
\
\
\
\
\
\
\
\
barrelman.image = UIImage(named: \cf9 "barrel.png"\cf3 )\
        barrelman?.frame = CGRect(x: (basepic.frame.origin.x + \cf5 0.4\cf3 *basepic.frame.width), y: (basepic.frame.origin.y-\cf5 70\cf3 ), width: \cf5 10\cf3 , height: \cf5 80\cf3 )\
\
\
\
\
\
\
\
\
\
\
\
\
\cf7 for\cf3  i \cf7 in\cf3  \cf5 0\cf3 ..<\cf5 7\cf3 \
        \{\
            \cf6 //Move x and y to next line.\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0
\cf3             startx = \cf5 0.5\cf3 *\cf4 mywidth\cf3 \
            starty = (\cf5 0.1\cf3 *\cf4 myheight\cf3 )+\cf2 Double\cf3 (((tempalien?.\cf2 size\cf3 .\cf2 height\cf3 )!)*\cf2 CGFloat\cf3 (i))\
            \
            \cf7 for\cf3  j \cf7 in\cf3  \cf5 0\cf3 ..<\cf5 7\cf3 \
            \{\
                \cf6 //Create UIImageView\
\cf3                 \cf7 let\cf3  view = \cf2 UIImageView\cf3 (frame: \cf2 CGRect\cf3 (x: \cf2 CGFloat\cf3 (startx), y: \cf2 CGFloat\cf3 (starty), width: (tempalien?.\cf2 size\cf3 .\cf2 width\cf3 )!, height: (tempalien?.\cf2 size\cf3 .\cf2 height\cf3 )!))\
                \
                view.\cf2 image\cf3  = tempalien\
                view.\cf2 isHidden\cf3  = \cf7 false\cf3 \
                \
                \cf6 //Add to array\
\cf3                 \cf4 objects\cf3 .\cf8 append\cf3 (view)\
                \
                \cf6 //Add the image to the view\
\cf3                 \cf7 self\cf3 .\cf8 addSubview\cf3 (view)\
                \
                \cf6 //Move the x position\
\cf3                 startx = startx+((\cf2 Double\cf3 ((tempalien?.\cf2 size\cf3 .\cf2 width\cf3 )!))*\cf2 Double\cf3 (j))\
            \}\
\
\
\
\
\
\
\
\cf6 /*let telluser = UIAlertController(title: "You're good, my friend!", message: "You've hit em all in \\(shotsint) shots! Not bad! Bet you can do better though eh? ", preferredStyle: .alert)\
            \
            telluser.addAction(UIAlertAction(title: "Yes I can!", style: .default, handler: \{action in\
            self.restart()\
            \}))\
            \
            telluser.addAction(UIAlertAction(title: "Maybe another day..", style: .cancel, handler: \{action in\
                UIControl().sendAction(#selector(URLSessionTask.suspend), to: UIApplication.shared, for: nil)\
                \
                //telluser.present(telluser, animated: true, completion: nil)\
                \
                UIApplication.shared.keyWindow?.rootViewController?.present(telluser, animated: true, completion: nil)\
            \}))\
            \
            callme = 1;\
            \
            if (restartint == 1)\
            \{\
                restart()\
                restartint = 0\
                callme = 0\
            \}*/\cf3 \
\
}